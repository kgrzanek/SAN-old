* Szybkie potęgowanie
  a. Zaimplementować rekurencyjną procedurę szybkiego potęgowania. Uruchomić dla
     kilku wartości a i n. Wykorzystać klasę java.math.BigInteger.
  b. Zaproponować wersję powyższej procedury wykorzystującą jedynie instrukcje
     warunkowe oraz instrukcję skoku (pętlę while).
* Permutacje
  Napisz procedurę, która mając daną tablicę jednowymiarową (o rozmiarze n)
  dowolnych elementów (int, String, itd.) zwraca wszystkie permutacje tych
  elementów. Wynik powinien być dwuwymiarową tablicą o n! wierszach i n
  kolumnach:

  permutacje([1 2 3 4]) = [[1, 2, 3, 4]
                           [1, 2, 4, 3]
                           [1, 3, 2, 4]
                           [1, 3, 4, 2]

                           ...

                           [4, 3, 2, 1]]

* Sekwencja niezmienna (1)
  Zrealizuj operator allIndexesOf, który działa, jak następuje:
  Seq<String>  napisy = LinkedSeq.make("a", "b", "c", "d", "a");
  Seq<Integer> result = napisy.allIndexesOf(s -> "a".equals(s)); // => (0, 4)

* Sekwencja niezmienna (2)
  Zrealizuj operator findAll, który działa, jak poniżej:
  Seq<String> napisy = LinkedSeq.make("aaa", "bb", "cccc", "ddd");
  Seq<String> result = napisy.findAll(s -> s.lenght() == 3); // => ("aaa", "ddd")

* Sekwencja niezmienna (3)
  Korzystając z operatora fmap napisz program który:
  - Buduje listę elementów typu String (Seq<String>)
  - Zwraca listę długości tych elementów
* Sekwencja nieskończona
  Korzystając z LazySeq, operatorów iterate i fmap zrealizuj
  nieskończony ciąg 0, 1, 1, 2, 3, 5, 8, 13, ...
  Hint 1: Stwórz klasę Pair reprezentującą pary obiektów
  Hint 2: Zrealizuj operator fmap wykorzystujący odroczenie
* DLinkedList
  - Zrealizuj operator indexOf(value)
  - Zrealizuj operator addBefore(index, value)
  - Zrealizuj operator addAfter(index, value)
  - Zrealizuj operator delete(index)
